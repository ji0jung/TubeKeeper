AWSTemplateFormatVersion: '2010-09-09'
Description: 'AIDLC Unit1 Authentication - ECS and ALB Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name
  
  ProjectName:
    Type: String
    Default: aidlc-auth
    Description: Project name for resource naming

  ImageURI:
    Type: String
    Default: nginx:latest
    Description: Docker image URI (will be updated during deployment)

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-${Environment}-cluster'
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1



  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-${Environment}'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: 
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-ECSTaskExecutionRoleArn'
      TaskRoleArn: 
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-ECSTaskRoleArn'
      ContainerDefinitions:
        - Name: !Sub '${ProjectName}-app'
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: 8001
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 
                Fn::ImportValue: !Sub '${ProjectName}-${Environment}-LogGroup'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: SES_SENDER_EMAIL
              Value: jhrhee@amazon.com
            - Name: APP_NAME
              Value: AIDLC Authentication Service
            - Name: DEBUG
              Value: 'false'
            - Name: LOG_LEVEL
              Value: INFO
            - Name: DATABASE_URL
              Value: !Sub 
                - 'postgresql://${Username}:${Password}@${Endpoint}:${Port}/${DatabaseName}'
                - Username: aidlc_user
                  Password: 'mRlUH4:9Xy1YuN;9Dwvy^Ss%Lt|`yzu7'
                  Endpoint:
                    Fn::ImportValue: !Sub '${ProjectName}-${Environment}-DatabaseEndpoint'
                  Port:
                    Fn::ImportValue: !Sub '${ProjectName}-${Environment}-DatabasePort'
                  DatabaseName:
                    Fn::ImportValue: !Sub '${ProjectName}-${Environment}-DatabaseName'
            - Name: REDIS_URL
              Value: !Sub 
                - 'redis://${RedisEndpoint}:${RedisPort}'
                - RedisEndpoint:
                    Fn::ImportValue: !Sub '${ProjectName}-${Environment}-RedisEndpoint'
                  RedisPort:
                    Fn::ImportValue: !Sub '${ProjectName}-${Environment}-RedisPort'
            - Name: JWT_SECRET_KEY
              Value: staging-jwt-secret-key-demo

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Split
        - ','
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-PublicSubnets'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-ALBSecurityGroup'

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tg'
      Port: 8001
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-VPC'
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${ProjectName}-${Environment}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-ECSSecurityGroup'
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-PrivateSubnets'
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: !Sub '${ProjectName}-app'
          ContainerPort: 8001
          TargetGroupArn: !Ref TargetGroup

Outputs:
  LoadBalancerDNS:
    Description: Application Load Balancer DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LoadBalancerDNS'

  LoadBalancerURL:
    Description: Application Load Balancer URL
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${ProjectName}-${Environment}-LoadBalancerURL'

  ECSCluster:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ECSCluster'

  ECSService:
    Description: ECS Service name
    Value: !Ref ECSService
    Export:
      Name: !Sub '${ProjectName}-${Environment}-ECSService'
