AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service for AIDLC Unit1 Authentication Service'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  ImageURI:
    Type: String
    Description: ECR Image URI for the application
    Default: 147997118879.dkr.ecr.us-west-2.amazonaws.com/aidlc-auth:latest

  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 128
    Description: Password for the RDS database
    Default: TempPassword123!

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${Environment}-aidlc-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-aidlc-cluster'
        - Key: Environment
          Value: !Ref Environment

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-aidlc-alb'
      Scheme: internet-facing
      Type: application
      Subnets: !Split
        - ','
        - !ImportValue 
          Fn::Sub: 'aidlc-auth-${Environment}-PublicSubnets'
      SecurityGroups:
        - !ImportValue 
          Fn::Sub: 'aidlc-auth-${Environment}-ALBSecurityGroup'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-aidlc-alb'

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-aidlc-tg'
      Port: 8001
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue 
        Fn::Sub: 'aidlc-auth-${Environment}-VPC'
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-aidlc-tg'

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Task Execution Role
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-aidlc-ecs-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-aidlc-ecs-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: '*'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${Environment}-aidlc-auth'
      RetentionInDays: 7

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${Environment}-aidlc-auth'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: aidlc-auth
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: 8001
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: REDIS_URL
              Value: !Sub 
                - 'redis://${Endpoint}:${Port}'
                - Endpoint: !ImportValue 
                    Fn::Sub: 'aidlc-auth-${Environment}-RedisEndpoint'
                  Port: !ImportValue 
                    Fn::Sub: 'aidlc-auth-${Environment}-RedisPort'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: SES_FROM_EMAIL
              Value: jhrhee@amazon.com
          Secrets:
            - Name: DATABASE_URL
              ValueFrom: !ImportValue 
                Fn::Sub: 'aidlc-auth-${Environment}-DBSecretArn'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Essential: true

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${Environment}-aidlc-auth-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue 
              Fn::Sub: 'aidlc-auth-${Environment}-ECSSecurityGroup'
          Subnets: !Split
            - ','
            - !ImportValue 
              Fn::Sub: 'aidlc-auth-${Environment}-PrivateSubnets'
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: aidlc-auth
          ContainerPort: 8001
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-aidlc-auth-service'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  LoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${Environment}-aidlc-alb-dns'

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${Environment}-aidlc-cluster-name'

  ECSServiceName:
    Description: ECS Service Name
    Value: !Ref ECSService
    Export:
      Name: !Sub '${Environment}-aidlc-service-name'
